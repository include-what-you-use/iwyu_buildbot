# -*- python -*-
# ex: set syntax=python:


# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
import iwyu
from buildbot.buildslave import BuildSlave
c['slaves'] = [iwyu.EC2LatentBuildSlave("ubuntu-bot", "*masked*",
    "/path/to/aws_credentials.txt", "us-west-2", "buildbot-slave-ubuntu")]

# 'protocols' contains information about protocols which master will use for
# communicating with slaves.
# You must define at least 'port' option that slaves could connect to your master
# with this protocol.
# 'port' must match the value configured into the buildslaves (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

from buildbot.changes.svnpoller import SVNPoller, split_file_alwaystrunk
c['change_source'] = []
c['change_source'].append(SVNPoller(
    svnurl="http://llvm.org/svn/llvm-project/llvm/trunk",
    split_file=split_file_alwaystrunk,
    project="llvm", pollinterval=30 * 60))
c['change_source'].append(SVNPoller(
    svnurl="http://llvm.org/svn/llvm-project/cfe/trunk",
    split_file=split_file_alwaystrunk,
    project="clang", pollinterval=30 * 60))
c['change_source'].append(SVNPoller(
    svnurl="https://include-what-you-use.googlecode.com/svn/trunk",
    split_file=split_file_alwaystrunk,
    project="iwyu", pollinterval=30 * 60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

import time
from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.schedulers.forcesched import ForceScheduler
from buildbot.schedulers.timed import Nightly
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(Nightly(name="iwyu", builderNames=["ubuntu-builder"], branch=None,
    # No change_filter because changes from all SVN pollers should trigger a build.
    hour=(4 - time.timezone / (60 * 60)) % 24, minute=0,  # 04:00 UTC == 20:00 PST
    onlyIfChanged=True))
c['schedulers'].append(ForceScheduler(
                            name="force",
                            builderNames=["ubuntu-builder"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

import os
from buildbot.process.factory import BuildFactory
from buildbot.steps.shell import ShellCommand, Compile


WORKSPACE_PATH = "/mnt/buildbot_iwyu_trunk/workspace"
ubuntu_factory = BuildFactory()
ubuntu_factory.addStep(ShellCommand(
    name="update LLVM", description="updating LLVM", descriptionDone="update LLVM",
    command=["svn", "update", os.path.join(WORKSPACE_PATH, "sources/llvm/")]))
ubuntu_factory.addStep(ShellCommand(
    name="update Clang", description="updating Clang", descriptionDone="update Clang",
    command=["svn", "update", os.path.join(WORKSPACE_PATH, "sources/llvm/tools/clang/")]))

ubuntu_factory.addStep(ShellCommand(
    name="clean LLVM+Clang artifacts", description="cleaning LLVM+Clang artifacts", descriptionDone="clean LLVM+Clang artifacts",
    command=["rm", "-r", os.path.join(WORKSPACE_PATH, "installed/")]))
ubuntu_factory.addStep(ShellCommand(
    name="clean LLVM+Clang", description="cleaning LLVM+Clang", descriptionDone="clean LLVM+Clang",
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_llvm/"), "clean"]))

ubuntu_factory.addStep(Compile(
    name="compile LLVM+Clang", description="compiling LLVM+Clang", descriptionDone="compile LLVM+Clang",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_llvm/"), "install"]))

ubuntu_factory.addStep(ShellCommand(
    name="update IWYU", description="updating IWYU", descriptionDone="update IWYU",
    #haltOnFailure=True,
    command=["svn", "update", os.path.join(WORKSPACE_PATH, "sources/iwyu/")]))

ubuntu_factory.addStep(ShellCommand(
    name="clean IWYU", description="cleaning IWYU", descriptionDone="clean IWYU",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_iwyu/"), "clean"]))

ubuntu_factory.addStep(Compile(
    name="compile IWYU", description="compiling IWYU", descriptionDone="compile IWYU",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_iwyu/")]))

ubuntu_factory.addStep(ShellCommand(
    name="copy IWYU", description="copying IWYU", descriptionDone="copy IWYU",
    haltOnFailure=True,
    command=["cp", os.path.join(WORKSPACE_PATH, "build_iwyu/include-what-you-use"),
                   os.path.join(WORKSPACE_PATH, "installed/bin/")]))

ubuntu_factory.addStep(ShellCommand(
    name="test IWYU", description="testing IWYU", descriptionDone="test IWYU",
    haltOnFailure=True,
    command=[os.path.join(WORKSPACE_PATH, "sources/iwyu/run_iwyu_tests.py")],
    workdir=os.path.join(WORKSPACE_PATH, "sources/iwyu/"),
    env={"PATH": [os.path.join(WORKSPACE_PATH, "installed/bin"), "${PATH}"]}))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="ubuntu-builder",
      slavenames=["ubuntu-bot"],
      factory=ubuntu_factory))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html, mail
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("*masked*","*masked*")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))
c['status'].append(mail.MailNotifier(
    fromaddr="buildbot@include-what-you-use.com",
    sendToInterestedUsers=False,
    mode=("failing",),
    extraRecipients=["include-what-you-use@googlegroups.com"],
    relayhost="smtp.webfaction.com",
    smtpUser="*masked*",
    smtpPassword="*masked*"))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "include-what-you-use"
c['titleURL'] = "https://code.google.com/p/include-what-you-use/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://buildbot.include-what-you-use.com:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
}
