# -*- python -*-
# ex: set filetype=python:

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
import iwyu
c['workers'] = [
    iwyu.EC2LatentWorker("ubuntu-18_04-bot-ephemeral", "*masked*",
                         "/path/to/aws_credentials.txt", "us-west-2",
                         "buildbot-worker-ubuntu"),
]

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': 9989}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot version of a python hello-world project.

c['change_source'] = []
c['change_source'].append(changes.GitPoller(
    repourl="https://git.llvm.org/git/llvm.git",
    project="llvm", pollinterval=30 * 60))
c['change_source'].append(changes.GitPoller(
    repourl="https://git.llvm.org/git/clang.git",
    project="clang", pollinterval=30 * 60))
c['change_source'].append(changes.GitPoller(
    repourl="https://github.com/include-what-you-use/include-what-you-use.git",
    project="iwyu", pollinterval=30 * 60))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

import time
all_builder_names = ["ubuntu-18_04-builder"]
c['schedulers'] = []
c['schedulers'].append(schedulers.Nightly(
    name="iwyu",
    builderNames=all_builder_names,
    # All pollers should trigger a build.
    change_filter=util.ChangeFilter(project=['iwyu', 'llvm', 'clang']),
    hour=int((4 - time.timezone / (60 * 60)) % 24),
    minute=0,  # 04:00 UTC == 20:00 PST
    onlyIfChanged=True))
c['schedulers'].append(schedulers.ForceScheduler(
    name="force",
    builderNames=all_builder_names))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

import os

WORKSPACE_PATH = "/mnt/buildbot_iwyu_trunk/workspace"
ubuntu_factory = util.BuildFactory()
ubuntu_factory.addStep(steps.ShellCommand(
    name="update LLVM", description="updating LLVM", descriptionDone="update LLVM",
    workdir=os.path.join(WORKSPACE_PATH, "sources/llvm/"),
    command=["git", "pull"]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="update Clang", description="updating Clang", descriptionDone="update Clang",
    workdir=os.path.join(WORKSPACE_PATH, "sources/llvm/tools/clang/"),
    command=["git", "pull"]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="clean LLVM+Clang artifacts", description="cleaning LLVM+Clang artifacts", descriptionDone="clean LLVM+Clang artifacts",
    command=["rm", "-rf", os.path.join(WORKSPACE_PATH, "installed/")]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="clean LLVM+Clang", description="cleaning LLVM+Clang", descriptionDone="clean LLVM+Clang",
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_llvm/"), "clean"]))

ubuntu_factory.addStep(steps.Compile(
    name="compile LLVM+Clang", description="compiling LLVM+Clang", descriptionDone="compile LLVM+Clang",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_llvm/"), "install"]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="update IWYU", description="updating IWYU", descriptionDone="update IWYU",
    workdir=os.path.join(WORKSPACE_PATH, "sources/iwyu/"),
    command=["git", "pull"]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="clean IWYU", description="cleaning IWYU", descriptionDone="clean IWYU",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_iwyu/"), "clean"]))

ubuntu_factory.addStep(steps.Compile(
    name="compile IWYU", description="compiling IWYU", descriptionDone="compile IWYU",
    haltOnFailure=True,
    command=["ninja", "-C", os.path.join(WORKSPACE_PATH, "build_iwyu/"), "install"]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="test IWYU", description="testing IWYU", descriptionDone="test IWYU",
    haltOnFailure=True,
    command=[os.path.join(WORKSPACE_PATH, "sources/iwyu/run_iwyu_tests.py")],
    workdir=os.path.join(WORKSPACE_PATH, "sources/iwyu/"),
    env={"PATH": [os.path.join(WORKSPACE_PATH, "installed/bin"), "${PATH}"]}))

ubuntu_factory.addStep(steps.ShellCommand(
    name="test fix_includes", description="testing fix_includes.py", descriptionDone="test fix_includes",
    haltOnFailure=True,
    command=[os.path.join(WORKSPACE_PATH, "sources/iwyu/fix_includes_test.py")]))

ubuntu_factory.addStep(steps.ShellCommand(
    name="test iwyu_tool", description="testing iwyu_tool.py", descriptionDone="test iwyu_tool",
    haltOnFailure=True,
    command=[os.path.join(WORKSPACE_PATH, "sources/iwyu/iwyu_tool_test.py")]))


c['builders'] = []
c['builders'].append(
    util.BuilderConfig(name="ubuntu-18_04-builder",
                       workernames=["ubuntu-18_04-bot-ephemeral"],
                       factory=ubuntu_factory))

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

c['services'] = []
c['services'].append(reporters.MailNotifier(
    fromaddr="buildbot@include-what-you-use.org",
    sendToInterestedUsers=False,
    mode=("failing",),
    extraRecipients=["include-what-you-use@googlegroups.com"],
    relayhost="mail.gandi.net",
    smtpUser="*masked*",
    smtpPassword="*masked*"))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "include-what-you-use"
c['titleURL'] = "https://include-what-you-use.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = "http://buildbot.include-what-you-use.org:8010/"

# minimalistic config to activate new web UI
c['www'] = dict(port=8010,
                plugins=dict(waterfall_view={}, console_view={}, grid_view={}))
authz = util.Authz(
    allowRules=[
        util.AnyControlEndpointMatcher(role="admins"),
    ],
    roleMatchers=[
        util.RolesFromUsername(roles=["admins"], usernames=["*masked*"])
    ]
)
auth = util.UserPasswordAuth({'*masked*': '*masked*'})
c['www']['auth'] = auth
c['www']['authz'] = authz

c['buildbotNetUsageData'] = None

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url': "sqlite:///state.sqlite",
}
